// <auto-generated />
using System;
using API.DAO;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(QuizletLiteContext))]
    partial class QuizletLiteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "What is the capital of France?",
                            OptionsJson = "[{\"Content\":\"Paris\",\"IsCorrect\":true},{\"Content\":\"London\",\"IsCorrect\":false},{\"Content\":\"Berlin\",\"IsCorrect\":false},{\"Content\":\"Madrid\",\"IsCorrect\":false}]",
                            QuestionType = 0,
                            QuizId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Which planets are part of the solar system?",
                            OptionsJson = "[{\"Content\":\"Mercury\",\"IsCorrect\":true},{\"Content\":\"Venus\",\"IsCorrect\":true},{\"Content\":\"Earth\",\"IsCorrect\":true},{\"Content\":\"Pluto\",\"IsCorrect\":false}]",
                            QuestionType = 1,
                            QuizId = 2
                        },
                        new
                        {
                            Id = 3,
                            Content = "Who was the first President of the United States?",
                            OptionsJson = "[{\"Content\":\"George Washington\",\"IsCorrect\":true},{\"Content\":\"Thomas Jefferson\",\"IsCorrect\":false},{\"Content\":\"Abraham Lincoln\",\"IsCorrect\":false},{\"Content\":\"John Adams\",\"IsCorrect\":false}]",
                            QuestionType = 0,
                            QuizId = 3
                        },
                        new
                        {
                            Id = 4,
                            Content = "What is the capital of Vietnam?",
                            OptionsJson = "[{\"Content\":\"Hanoi\",\"IsCorrect\":true},{\"Content\":\"Ho Chi Minh City\",\"IsCorrect\":false},{\"Content\":\"Da Nang\",\"IsCorrect\":false},{\"Content\":\"Hue\",\"IsCorrect\":false}]",
                            QuestionType = 0,
                            QuizId = 1
                        },
                        new
                        {
                            Id = 5,
                            Content = "What is the largest planet in our solar system?",
                            OptionsJson = "[{\"Content\":\"Jupiter\",\"IsCorrect\":true},{\"Content\":\"Saturn\",\"IsCorrect\":false},{\"Content\":\"Earth\",\"IsCorrect\":false},{\"Content\":\"Mars\",\"IsCorrect\":false}]",
                            QuestionType = 0,
                            QuizId = 2
                        });
                });

            modelBuilder.Entity("API.Models.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Quizzes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 2,
                            CreatedOn = new DateTime(2025, 6, 17, 9, 59, 26, 905, DateTimeKind.Local).AddTicks(5506),
                            IsActive = true,
                            Name = "General Knowledge Quiz"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 2,
                            CreatedOn = new DateTime(2025, 6, 17, 9, 59, 26, 905, DateTimeKind.Local).AddTicks(5520),
                            IsActive = true,
                            Name = "Science Trivia"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 3,
                            CreatedOn = new DateTime(2025, 6, 17, 9, 59, 26, 905, DateTimeKind.Local).AddTicks(5522),
                            IsActive = true,
                            Name = "History Challenge"
                        });
                });

            modelBuilder.Entity("API.Models.QuizAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswersJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<string>("QuizName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizAttempts");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@email.com",
                            PasswordHash = "$2a$12$6GMyaacdt22VmPBouyUnB.e/4guoGG09ukoXkx/eb02bKcwokoy9C",
                            Role = 0,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "user1@email.com",
                            PasswordHash = "$2a$12$6GMyaacdt22VmPBouyUnB.e/4guoGG09ukoXkx/eb02bKcwokoy9C",
                            Role = 1,
                            Username = "user1"
                        },
                        new
                        {
                            Id = 3,
                            Email = "user2@email.com",
                            PasswordHash = "$2a$12$6GMyaacdt22VmPBouyUnB.e/4guoGG09ukoXkx/eb02bKcwokoy9C",
                            Role = 1,
                            Username = "user2"
                        });
                });

            modelBuilder.Entity("API.Models.Question", b =>
                {
                    b.HasOne("API.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("API.Models.Quiz", b =>
                {
                    b.HasOne("API.Models.User", "CreatedByNavigation")
                        .WithMany("Quizzes")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("API.Models.QuizAttempt", b =>
                {
                    b.HasOne("API.Models.Quiz", "Quiz")
                        .WithMany("QuizAttempts")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "User")
                        .WithMany("QuizAttempts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Quiz", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("QuizAttempts");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Navigation("QuizAttempts");

                    b.Navigation("Quizzes");
                });
#pragma warning restore 612, 618
        }
    }
}
