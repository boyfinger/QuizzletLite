@page
@model WebApp.Pages.Admin.User.IndexModel
@{
    var token = HttpContext.Session.GetString("accessToken");
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Bootstrap User Table</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link href="~/css/crud.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"></script>
    <script>
        $(document).ready(function(){
            $('[data-toggle="tooltip"]').tooltip();
        });
    </script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <link href="~/css/admin_sidebar.css" rel="stylesheet" />

</head>
<body>
    @await Html.PartialAsync("_AdminSidebar")
    <div class="container-xl" style="margin-left: 0px;">
        <div class="table-responsive">
            <div class="table-wrapper">
                <div class="table-title">
                    <div class="row">
                        <div class="col-sm-8"><h2>User <b>Management</b></h2>
                            <button type="button" class="btn btn-success ml-3" onclick="openAddModal()">
                                <span>Add New User</span>
                            </button>
                        </div>
                        <div class="col-sm-4">
                            <div class="row">
                                <div class="col-9 pr-1">
                                    <div class="search-box">
                                        <i class="material-icons">&#xE8B6;</i>
                                        <input id="search-input" type="text" class="form-control" placeholder="Search username or email...">
                                    </div>
                                </div>
                                <div class="col-3 pl-1">
                                    <select id="role-filter" class="form-control">
                                        <option value="">All</option>
                                        <option value="0">User</option>
                                        <option value="1">Admin</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <table class="table table-striped table-hover table-bordered">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Username</th>
                            <th>Email</th>
                            <th>Role</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="user-table-body">
                        <!-- Rows will be dynamically injected here -->
                    </tbody>
                </table>
                <div class="clearfix">
                    <div class="hint-text" id="hint-text">Loading...</div>
                    <ul class="pagination" id="pagination-bar">
                        <!-- Pagination links will be dynamically created here -->
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <!-- User Detail Modal -->
    <div class="modal fade" id="editUserModal" tabindex="-1" role="dialog" aria-labelledby="editUserModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editUserModalLabel">Edit User Details</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="edit-user-form">
                        <input type="hidden" id="edit-user-id">
                        <div class="form-group">
                            <label>Username</label>
                            <input type="text" class="form-control" id="edit-username">
                        </div>
                        <div class="form-group">
                            <label>Email</label>
                            <input type="email" readonly class="form-control" id="edit-email">
                        </div>
                        <div class="form-group">
                            <label>Role</label>
                            <select class="form-control" id="edit-role">
                                <option value="0">User</option>
                                <option value="1">Admin</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Exit</button>
                    <button type="button" class="btn btn-primary" onclick="updateUser()">Update</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="deleteUserModal" tabindex="-1" role="dialog" aria-labelledby="deleteUserModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-danger" id="deleteUserModalLabel">Confirm Delete</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete user <strong id="delete-username"></strong>?</p>
                    <input type="hidden" id="delete-user-id">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" onclick="confirmDeleteUser()">Delete</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Add User Modal -->
    <div class="modal fade" id="addUserModal" tabindex="-1" role="dialog" aria-labelledby="addUserModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addUserModalLabel">Add New User</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="add-user-form">
                        <div class="form-group">
                            <label>Username</label>
                            <input type="text" class="form-control" id="add-username">
                        </div>
                        <div class="form-group">
                            <label>Email</label>
                            <input type="email" class="form-control" id="add-email">
                        </div>
                        <div class="form-group">
                            <label>Role</label>
                            <select class="form-control" id="add-role">
                                <option value="0">User</option>
                                <option value="1">Admin</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Exit</button>
                    <button type="button" class="btn btn-success" onclick="addUser()">Add</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        const accessToken = '@token';
        const API_URL = 'https://localhost:7245/api/user'; // sửa URL nếu cần
        let currentPage = 1;
        const pageSize = 5;

        async function fetchUsers(page) {
            const searchValue = document.getElementById('search-input').value.trim();
            const roleValue = document.getElementById('role-filter').value;

            // Xây dựng query string truyền thống
            // Gán username và email từ searchValue cho cả 2, hoặc bạn có thể parse ra riêng
            // Ở đây giả sử searchValue tìm trong cả username và email (tùy backend)
                    const params = new URLSearchParams();
        if (searchValue !== '') {
            params.append('Keyword', searchValue);
        }
                if (roleValue !== '') {
            params.append('Role', roleValue);
        }
        params.append('Page', page);
        params.append('PageSize', pageSize);
            params.append('Page', page);
            params.append('PageSize', pageSize);

            try {
                const response = await fetch(`${API_URL}?${params.toString()}`, {
                    headers: { 'Accept': 'application/json' ,
                    'Authorization': `Bearer ${accessToken}`}
                });
                if (!response.ok) throw new Error('Failed to fetch users');
                const data = await response.json();

                renderTable(data.items);
                const totalRecords = data.totalCount || 0;
                const totalPages = Math.max(1, Math.ceil(totalRecords / pageSize));

                updateHintText(data.items.length, totalRecords);
                updatePagination(page, totalPages);
            } catch (error) {
                console.error('Error:', error);
                alert('Could not load user data.');
            }
        }

                function renderTable(users) {
            const tbody = document.getElementById('user-table-body');
            tbody.innerHTML = ''; // Clear existing rows

            if (users.length === 0) {
                tbody.innerHTML = `<tr><td colspan="5" class="text-center">No users found.</td></tr>`;
                return;
            }

            users.forEach((user, index) => {
                let roleText = '';
                switch(user.role) {
                    case 0:
                        roleText = 'User';
                        break;
                    case 1:
                        roleText = 'Admin';
                        break;
                    default:
                        roleText = escapeHtml(user.role); // Hiển thị nguyên nếu khác 0 hoặc 1
                }

                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${(currentPage - 1) * pageSize + index + 1}</td>
                    <td>${escapeHtml(user.username)}</td>
                    <td>${escapeHtml(user.email)}</td>
                    <td>${roleText}</td>
                    <td>
                        <a href="#" class="edit" title="Edit" data-toggle="tooltip" onclick="openEditModal('` + encodeURIComponent(JSON.stringify(user)) + `'); return false;"><i class="material-icons">&#xE254;</i></a>
        <a href="#" class="delete" title="Delete" data-toggle="tooltip" onclick="openDeleteModal(${user.id}, '${escapeHtml(user.username)}'); return false;"><i class="material-icons text-danger">&#xE872;</i></a>                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        function updateHintText(entries, totalRecords) {
            const hint = document.getElementById('hint-text');
            hint.innerHTML = `Showing <b>${entries}</b> entries on page <b>${currentPage}</b> of <b>${Math.ceil(totalRecords / pageSize)}</b> (total ${totalRecords} records)`;
        }

        function updatePagination(current, totalPages) {
            const pagination = document.getElementById('pagination-bar');
            pagination.innerHTML = '';

            pagination.innerHTML += `
                <li class="page-item ${current === 1 ? 'disabled' : ''}">
                    <a href="#" class="page-link" onclick="gotoPage(${current - 1}); return false;"><i class="fa fa-angle-double-left"></i></a>
                </li>`;

            for (let i = 1; i <= totalPages; i++) {
                pagination.innerHTML += `
                    <li class="page-item ${current === i ? 'active' : ''}">
                        <a href="#" class="page-link" onclick="gotoPage(${i}); return false;">${i}</a>
                    </li>`;
            }

            pagination.innerHTML += `
                <li class="page-item ${current === totalPages ? 'disabled' : ''}">
                    <a href="#" class="page-link" onclick="gotoPage(${current + 1}); return false;"><i class="fa fa-angle-double-right"></i></a>
                </li>`;
        }

        function gotoPage(page) {
            if (page < 1) return;
            currentPage = page;
            fetchUsers(page);
        }

                function openEditModal(encodedUser) {
            const user = JSON.parse(decodeURIComponent(encodedUser));
            // Đổ dữ liệu vào modal
            document.getElementById('edit-user-id').value = user.id;
            document.getElementById('edit-username').value = user.username;
            document.getElementById('edit-email').value = user.email;
            document.getElementById('edit-role').value = user.role;

            // Mở modal
            $('#editUserModal').modal('show');
        }
                        async function updateUser() {
            const id = document.getElementById('edit-user-id').value;
            const updatedUser = {
                id: parseInt(id),
                username: document.getElementById('edit-username').value.trim(),
                email: document.getElementById('edit-email').value.trim(),
                role: parseInt(document.getElementById('edit-role').value)
            };

            try {
                const response = await fetch(`${API_URL}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' ,
                    'Authorization': `Bearer ${accessToken}`},
                    body: JSON.stringify(updatedUser)
                });
                const result = await response.json();

                if (!response.ok) {
                    throw new Error(result.message || 'Failed to update user');
                }

                $('#editUserModal').modal('hide');
                fetchUsers(currentPage);
                toastr.success('User updated successfully.');
            } catch (error) {
                console.error('Error:', error);
                toastr.error(error.message || 'Update failed.');
            }
        }

                function openDeleteModal(userId, username) {
            document.getElementById('delete-user-id').value = userId;
            document.getElementById('delete-username').textContent = username;
            $('#deleteUserModal').modal('show');
        }
                        async function confirmDeleteUser() {
            const userId = document.getElementById('delete-user-id').value;
            try {
                const response = await fetch(`${API_URL}/${userId}`, {
                    method: 'DELETE',
                    headers: {
                'Authorization': `Bearer ${accessToken}`
            }
                });
                const result = await response.json();

                if (!response.ok) {
                    throw new Error(result.message || 'Failed to delete user');
                }

                $('#deleteUserModal').modal('hide');
                fetchUsers(currentPage);
                toastr.success('User deleted successfully.');
            } catch (error) {
                console.error('Error:', error);
                toastr.error(error.message || 'Delete failed.');
            }
        }
                function openAddModal() {
            document.getElementById('add-username').value = '';
            document.getElementById('add-email').value = '';
            document.getElementById('add-role').value = '0'; // mặc định User
            $('#addUserModal').modal('show');
        }

       
        async function addUser() {
            const username = document.getElementById('add-username').value.trim();
            const email = document.getElementById('add-email').value.trim();
            const role = parseInt(document.getElementById('add-role').value);

            if (!username || !email) {
                toastr.warning('Username and email are required.');
                return;
            }

            const newUser = {
                username,
                email,
                role
            };

            try {
                const response = await fetch(`${API_URL}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json',
                    'Authorization': `Bearer ${accessToken}`},
                    body: JSON.stringify(newUser)
                });
                const result = await response.json();

                if (!response.ok) {
                    throw new Error(result.message || 'Failed to add user');
                }

                $('#addUserModal').modal('hide');
                fetchUsers(currentPage); // reload table
                toastr.success(result.message || 'User created successfully.');
            } catch (error) {
                console.error('Error:', error);
                toastr.error(error.message || 'Add user failed.');
            }
        }




        function escapeHtml(str) {
            return String(str).replace(/[&<>"']/g, function (m) {
                return ({
                    '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;'
                })[m];
            });
        }
                toastr.options = {
            "closeButton": true,
            "progressBar": true,
            "positionClass": "toast-top-right",
            "timeOut": "3000"
        };

        document.addEventListener('DOMContentLoaded', () => {
            fetchUsers(currentPage);

            // Search on Enter key
            const searchInput = document.getElementById('search-input');
            searchInput.addEventListener('keypress', e => {
                if (e.key === 'Enter') {
                    currentPage = 1;
                    fetchUsers(currentPage);
                }
            });
                    document.getElementById('role-filter').addEventListener('change', () => {
            currentPage = 1;
            fetchUsers(currentPage);
        });
        });

    </script>


</body>
</html>
