@page
@model WebApp.Pages.Admin.User.IndexModel
@{
    Layout = "_AdminLayout";
    var token = HttpContext.Session.GetString("accessToken");
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Bootstrap User Table</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link href="~/css/crud.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

</head>
<body>
    <
    <div class="wrapper">
        @await Html.PartialAsync("_AdminSidebar")
        <div class="main-panel">
            @await Html.PartialAsync("AdminNavbar")
            <div class="content">
                <div class="row">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="card-title mb-0">User Management</h5>
                                <button type="button" class="btn btn-success" onclick="openAddModal()">➕ Add New User</button>
                            </div>
                            <div class="card-body">
                                <div class="row mb-3">
                                    <div class="col-md-8">
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text"><i class="nc-icon nc-zoom-split"></i></span>
                                            </div>
                                            <input id="search-input" type="text" class="form-control" placeholder="Search username or email..." />
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <select id="role-filter" class="form-control">
                                            <option value="">All Roles</option>
                                            <option value="1">User</option>
                                            <option value="0">Admin</option>
                                        </select>
                                    </div>
                                </div>

                                <div class="table-responsive">
                                    <table class="table table-hover table-bordered">
                                        <thead class="thead-light">
                                            <tr>
                                                <th>#</th>
                                                <th>Username</th>
                                                <th>Email</th>
                                                <th>Role</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody id="user-table-body">
                                            <!-- Dynamic content via JS -->
                                        </tbody>
                                    </table>
                                </div>

                                <div class="d-flex justify-content-between align-items-center mt-3">
                                    <div id="hint-text" class="text-muted">Loading...</div>
                                    <ul id="pagination-bar" class="pagination pagination-sm mb-0">
                                        <!-- Pagination here -->
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Edit User Modal -->
                <div class="modal fade" id="editUserModal" tabindex="-1" role="dialog">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Edit User</h5>
                                <button type="button" class="close" data-dismiss="modal">
                                    <span>&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <form id="edit-user-form">
                                    <input type="hidden" id="edit-user-id" />
                                    <div class="form-group">
                                        <label>Username</label>
                                        <input type="text" id="edit-username" class="form-control" />
                                    </div>
                                    <div class="form-group">
                                        <label>Email</label>
                                        <input type="email" id="edit-email" class="form-control" readonly />
                                    </div>
                                    <div class="form-group">
                                        <label>Role</label>
                                        <select id="edit-role" class="form-control">
                                            <option value="0">Admin</option>
                                            <option value="1">User</option>
                                        </select>
                                    </div>
                                </form>
                            </div>
                            <div class="modal-footer">
                                <button class="btn btn-secondary" data-dismiss="modal">Exit</button>
                                <button class="btn btn-primary" onclick="updateUser()">Update</button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Delete Confirmation Modal -->
                <div class="modal fade" id="deleteUserModal" tabindex="-1" role="dialog">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header text-danger">
                                <h5 class="modal-title">Confirm Delete</h5>
                                <button type="button" class="close" data-dismiss="modal"><span>&times;</span></button>
                            </div>
                            <div class="modal-body">
                                <p>Are you sure you want to delete user <strong id="delete-username"></strong>?</p>
                                <input type="hidden" id="delete-user-id" />
                            </div>
                            <div class="modal-footer">
                                <button class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                                <button class="btn btn-danger" onclick="confirmDeleteUser()">Delete</button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Add User Modal -->
                <div class="modal fade" id="addUserModal" tabindex="-1" role="dialog">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Add New User</h5>
                                <button type="button" class="close" data-dismiss="modal"><span>&times;</span></button>
                            </div>
                            <div class="modal-body">
                                <form id="add-user-form">
                                    <div class="form-group">
                                        <label>Username</label>
                                        <input type="text" class="form-control" id="add-username" />
                                    </div>
                                    <div class="form-group">
                                        <label>Email</label>
                                        <input type="email" class="form-control" id="add-email" />
                                    </div>
                                    <div class="form-group">
                                        <label>Role</label>
                                        <select class="form-control" id="add-role">
                                            <option value="1">User</option>
                                            <option value="0">Admin</option>
                                        </select>
                                    </div>
                                </form>
                            </div>
                            <div class="modal-footer">
                                <button class="btn btn-secondary" data-dismiss="modal">Exit</button>
                                <button class="btn btn-success" onclick="addUser()">Add</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        $(document).ready(function(){
            $('[data-toggle="tooltip"]').tooltip();
        });
    </script>
    <script>
        const accessToken = '@token';
        const API_URL = 'https://localhost:7245/api/user'; // sửa URL nếu cần
        let currentPage = 1;
        const pageSize = 5;

                async function fetchUsers(page) {
            const searchValue = document.getElementById('search-input').value.trim();
            const roleValue = document.getElementById('role-filter').value;

            const skip = (page - 1) * pageSize;
            const top = pageSize;

            let filter = [];
            if (searchValue !== '') {
                filter.push(`(contains(tolower(Username),'${searchValue.toLowerCase()}') or contains(tolower(Email),'${searchValue.toLowerCase()}'))`);
            }
            if (roleValue !== '') {
                filter.push(`Role eq ${roleValue}`);
            }

            const odataQuery = new URLSearchParams({
                $skip: skip,
                $top: top,
                $count: 'true'
            });
            if (filter.length > 0) {
                odataQuery.append("$filter", filter.join(" and "));
            }

            try {
                const response = await fetch(`https://localhost:7245/odata/Users?${odataQuery.toString()}`, {
                    headers: {
                        'Authorization': `Bearer ${accessToken}`,
                        'Accept': 'application/json'
                    }
                });

                if (!response.ok) throw new Error('Failed to fetch users');
                const data = await response.json();

                renderTable(data.value);
                updateHintText(data.value.length, data['@@odata.count']);
                const totalPages = Math.ceil(data['@@odata.count'] / pageSize);
                updatePagination(page, totalPages);
            } catch (error) {
                console.error('Error:', error);
                alert('Could not load user data.');
            }
        }

                        function renderTable(users) {
            const tbody = document.getElementById('user-table-body');
            tbody.innerHTML = '';

            if (users.length === 0) {
                tbody.innerHTML = `<tr><td colspan="5" class="text-center">No users found.</td></tr>`;
                return;
            }

            users.forEach((user, index) => {
                let roleText = '';
                switch (user.Role) { // <<== use PascalCase
                    case "User":
                        roleText = 'User';
                        break;
                    case "Admin":
                        roleText = 'Admin';
                        break;
                    default:
                        roleText = escapeHtml(user.Role);
                }

                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${(currentPage - 1) * pageSize + index + 1}</td>
                    <td>${escapeHtml(user.Username)}</td>
                    <td>${escapeHtml(user.Email)}</td>
                    <td>${roleText}</td>
                    <td>
                        <a href="#" class="edit" title="Edit" data-toggle="tooltip" onclick="openEditModal('` + encodeURIComponent(JSON.stringify(user)) + `'); return false;"><i class="material-icons">&#xE254;</i></a>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }


        function updateHintText(entries, totalRecords) {
            const hint = document.getElementById('hint-text');
            hint.innerHTML = `Showing <b>${entries}</b> entries on page <b>${currentPage}</b> of <b>${Math.ceil(totalRecords / pageSize)}</b> (total ${totalRecords} records)`;
        }

        function updatePagination(current, totalPages) {
            const pagination = document.getElementById('pagination-bar');
            pagination.innerHTML = '';

            pagination.innerHTML += `
                <li class="page-item ${current === 1 ? 'disabled' : ''}">
                    <a href="#" class="page-link" onclick="gotoPage(${current - 1}); return false;"><i class="fa fa-angle-double-left"></i></a>
                </li>`;

            for (let i = 1; i <= totalPages; i++) {
                pagination.innerHTML += `
                    <li class="page-item ${current === i ? 'active' : ''}">
                        <a href="#" class="page-link" onclick="gotoPage(${i}); return false;">${i}</a>
                    </li>`;
            }

            pagination.innerHTML += `
                <li class="page-item ${current === totalPages ? 'disabled' : ''}">
                    <a href="#" class="page-link" onclick="gotoPage(${current + 1}); return false;"><i class="fa fa-angle-double-right"></i></a>
                </li>`;
        }

        function gotoPage(page) {
            if (page < 1) return;
            currentPage = page;
            fetchUsers(page);
        }

                function openEditModal(encodedUser) {
            const user = JSON.parse(decodeURIComponent(encodedUser));
            // Đổ dữ liệu vào modal
            document.getElementById('edit-user-id').value = user.Id;
            document.getElementById('edit-username').value = user.Username;
            document.getElementById('edit-email').value = user.Email;
                let roleValue = user.Role === "Admin" ? "0" : user.Role === "User" ? "1" : "";
        document.getElementById('edit-role').value = roleValue;

            // Mở modal
            $('#editUserModal').modal('show');
        }
                        async function updateUser() {
            const id = document.getElementById('edit-user-id').value;
            const updatedUser = {
                id: parseInt(id),
                username: document.getElementById('edit-username').value.trim(),
                email: document.getElementById('edit-email').value.trim(),
                role: parseInt(document.getElementById('edit-role').value)
            };

            try {
                const response = await fetch(`${API_URL}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' ,
                    'Authorization': `Bearer ${accessToken}`},
                    body: JSON.stringify(updatedUser)
                });
                const result = await response.json();

                if (!response.ok) {
                    throw new Error(result.message || 'Failed to update user');
                }

                $('#editUserModal').modal('hide');
                fetchUsers(currentPage);
                toastr.success('User updated successfully.');
            } catch (error) {
                console.error('Error:', error);
                toastr.error(error.message || 'Update failed.');
            }
        }

                function openDeleteModal(userId, username) {
            document.getElementById('delete-user-id').value = userId;
            document.getElementById('delete-username').textContent = username;
            $('#deleteUserModal').modal('show');
        }
                        async function confirmDeleteUser() {
            const userId = document.getElementById('delete-user-id').value;
            try {
                const response = await fetch(`${API_URL}/${userId}`, {
                    method: 'DELETE',
                    headers: {
                'Authorization': `Bearer ${accessToken}`
            }
                });
                const result = await response.json();

                if (!response.ok) {
                    throw new Error(result.message || 'Failed to delete user');
                }

                $('#deleteUserModal').modal('hide');
                fetchUsers(currentPage);
                toastr.success('User deleted successfully.');
            } catch (error) {
                console.error('Error:', error);
                toastr.error(error.message || 'Delete failed.');
            }
        }
                function openAddModal() {
            document.getElementById('add-username').value = '';
            document.getElementById('add-email').value = '';
            document.getElementById('add-role').value = '0'; // mặc định User
            $('#addUserModal').modal('show');
        }

       
        async function addUser() {
            const username = document.getElementById('add-username').value.trim();
            const email = document.getElementById('add-email').value.trim();
            const role = parseInt(document.getElementById('add-role').value);

            if (!username || !email) {
                toastr.warning('Username and email are required.');
                return;
            }

            const newUser = {
                username,
                email,
                role
            };

            try {
                const response = await fetch(`${API_URL}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json',
                    'Authorization': `Bearer ${accessToken}`},
                    body: JSON.stringify(newUser)
                });
                const result = await response.json();

                if (!response.ok) {
                    throw new Error(result.message || 'Failed to add user');
                }

                $('#addUserModal').modal('hide');
                fetchUsers(currentPage); // reload table
                toastr.success(result.message || 'User created successfully.');
            } catch (error) {
                console.error('Error:', error);
                toastr.error(error.message || 'Add user failed.');
            }
        }




        function escapeHtml(str) {
            return String(str).replace(/[&<>"']/g, function (m) {
                return ({
                    '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;'
                })[m];
            });
        }
                toastr.options = {
            "closeButton": true,
            "progressBar": true,
            "positionClass": "toast-top-right",
            "timeOut": "3000"
        };

        document.addEventListener('DOMContentLoaded', () => {
            fetchUsers(currentPage);

            // Search on Enter key
            const searchInput = document.getElementById('search-input');
            searchInput.addEventListener('keypress', e => {
                if (e.key === 'Enter') {
                    currentPage = 1;
                    fetchUsers(currentPage);
                }
            });
                    document.getElementById('role-filter').addEventListener('change', () => {
            currentPage = 1;
            fetchUsers(currentPage);
        });
        });

    </script>
</body>
</html>
