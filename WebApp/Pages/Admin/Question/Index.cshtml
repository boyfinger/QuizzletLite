@page
@model WebApp.Pages.Admin.Question.IndexModel
@{
    var token = HttpContext.Session.GetString("accessToken");
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>Questions Viewer</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css" />
    <link href="~/css/admin_sidebar.css" rel="stylesheet" />
    <style>
        .correct {
            color: green;
            font-weight: bold;
        }

        .option {
            margin-left: 20px;
        }

        .cursor-pointer {
            cursor: pointer;
        }
    </style>
</head>
<body class="p-4">
    @await Html.PartialAsync("_AdminSidebar")

    <div class="container">
        <h2 class="mb-4">Questions of Quiz ID: <span id="quiz-id-title"></span></h2>

        <div class="mb-3">
            <button class="btn btn-success dropdown-toggle" type="button" id="addQuestionDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Add New Question
            </button>
            <div class="dropdown-menu" aria-labelledby="addQuestionDropdown">
                <a class="dropdown-item cursor-pointer" onclick="showCreateForm('SingleChoice')">Single Choice</a>
                <a class="dropdown-item cursor-pointer" onclick="showCreateForm('MultipleChoice')">Multiple Choice</a>
            </div>
        </div>

        <!-- Create Form -->
        <div id="create-form-container" class="card p-3 mb-4 border-success" style="display:none;">
            <h4 id="create-form-title"></h4>
            <div class="form-group">
                <label>Question Content</label>
                <input type="text" class="form-control" id="new-question-content" />
            </div>
            <div class="form-group">
                <label>Options</label>
                <div id="new-options-container"></div>
                <button type="button" class="btn btn-secondary btn-sm mt-2" onclick="addNewOption()">Add Option</button>
            </div>
            <div class="d-flex justify-content-end">
                <button type="button" class="btn btn-success" onclick="saveNewQuestion()">Save Question</button>
                <button type="button" class="btn btn-link text-danger ml-2" onclick="hideCreateForm()">Cancel</button>
            </div>
        </div>

        <!-- Edit Form -->
        <div id="edit-form-container" class="card p-3 mb-4 border-primary" style="display:none;">
            <h4>Edit Question</h4>
            <input type="hidden" id="edit-question-id" />
            <div class="form-group">
                <label>Question Content</label>
                <input type="text" class="form-control" id="edit-question-content" />
            </div>
            <div class="form-group">
                <label>Question Type</label>
                <input type="text" class="form-control" id="edit-question-type" readonly />
            </div>
            <div class="form-group">
                <label>Options</label>
                <div id="edit-options-container"></div>
                <button type="button" class="btn btn-secondary btn-sm mt-2" onclick="addEditOption()">Add Option</button>
            </div>
            <div class="d-flex justify-content-end">
                <button type="button" class="btn btn-primary" onclick="saveEditedQuestion()">Save Changes</button>
                <button type="button" class="btn btn-link text-danger ml-2" onclick="hideEditForm()">Cancel</button>
            </div>
        </div>

        <div id="questions-container">
            <div class="alert alert-info">Loading questions...</div>
        </div>
    </div>

    <!-- Modal for messages -->
    <div class="modal fade" id="messageModal" tabindex="-1" role="dialog" aria-labelledby="messageModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="messageModalLabel">Message</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="$('#messageModal').modal('hide')">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="messageModalBody"></div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="$('#messageModal').modal('hide')">Close</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        // Token được lấy từ server và gán vào JS
        const accessToken = '@token';

        const API_URL = 'https://localhost:7245/api/Admin_Question';
        const quizId = new URLSearchParams(window.location.search).get('quizId');
        document.getElementById('quiz-id-title').innerText = quizId ?? 'N/A';

        // Hàm trả về header cho fetch kèm token Authorization và Content-Type nếu cần
        function getAuthHeaders(contentType = false) {
            const headers = {
                'Authorization': 'Bearer ' + accessToken
            };
            if (contentType) headers['Content-Type'] = 'application/json';
            return headers;
        }

        document.addEventListener('DOMContentLoaded', loadQuestions);

        // Show modal message
        function showMessage(message) {
            document.getElementById('messageModalBody').innerText = message;
            $('#messageModal').modal('show');
        }

        // Load questions from API
        async function loadQuestions() {
            if (!quizId) {
                document.getElementById('questions-container').innerHTML = '<div class="alert alert-danger">No quiz ID provided.</div>';
                return;
            }
            try {
                const response = await fetch(`${API_URL}/by-quiz/${quizId}`, {
                    headers: getAuthHeaders()
                });
                if (!response.ok) throw new Error('Failed to load questions.');
                const questions = await response.json();

                if (questions.length === 0) {
                    document.getElementById('questions-container').innerHTML = '<div class="alert alert-warning">No questions found for this quiz.</div>';
                    return;
                }

                renderQuestions(questions);
            } catch (error) {
                console.error(error);
                document.getElementById('questions-container').innerHTML = '<div class="alert alert-danger">Error loading questions.</div>';
            }
        }

        let questionsData = {};

        function renderQuestions(questions) {
            questionsData = {}; // reset
            const container = document.getElementById('questions-container');
            container.innerHTML = '';

            questions.forEach((q, index) => {
                questionsData[q.id] = q; // lưu câu hỏi theo id

                const options = JSON.parse(q.optionsJson || '[]');

                const card = document.createElement('div');
                card.classList.add('card', 'mb-3');

                const header = document.createElement('div');
                header.classList.add('card-header');
                header.innerHTML = `
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <strong>Question ${index + 1}:</strong> ${escapeHtml(q.content)}
                            <span class="badge badge-info ml-2">${escapeHtml(q.questionType)}</span>
                        </div>
                        <div>
                            <button class="btn btn-sm btn-primary mr-1" onclick="showEditForm(${q.id})">Edit</button>
                            <button class="btn btn-sm btn-danger" onclick="deleteQuestion(${q.id})">Delete</button>
                        </div>
                    </div>`;

                const body = document.createElement('div');
                body.classList.add('card-body');

                if (options.length === 0) {
                    body.innerHTML = '<p class="text-muted">No options found for this question.</p>';
                } else {
                    const list = document.createElement('ul');
                    list.classList.add('list-unstyled');
                    options.forEach(opt => {
                        const li = document.createElement('li');
                        li.className = `option ${opt.IsCorrect ? 'correct' : ''}`;
                        li.textContent = opt.Content;
                        list.appendChild(li);
                    });
                    body.appendChild(list);
                }

                card.appendChild(header);
                card.appendChild(body);
                container.appendChild(card);
            });
        }

        function escapeHtml(str) {
            return String(str).replace(/[&<>"']/g, function (m) {
                return { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;' }[m];
            });
        }

        // ===== Create Form Logic =====
        function showCreateForm(questionType) {
            hideEditForm();
            document.getElementById('create-form-title').innerText = `Create ${questionType} Question`;
            document.getElementById('create-form-container').style.display = 'block';
            document.getElementById('new-question-content').value = '';
            document.getElementById('new-options-container').innerHTML = '';
            newQuestionType = questionType;
            addNewOption();
            addNewOption();
        }

        function hideCreateForm() {
            document.getElementById('create-form-container').style.display = 'none';
        }

        function addNewOption() {
            const container = document.getElementById('new-options-container');
            const index = container.children.length;

            const div = document.createElement('div');
            div.className = 'd-flex align-items-center mb-2';
            div.innerHTML = `
                <input type="text" class="form-control mr-2 option-content" placeholder="Option content" />
                <div class="form-check mr-2">
                    <input type="checkbox" class="form-check-input option-correct" id="new-correct-${index}" />
                    <label class="form-check-label" for="new-correct-${index}">Correct</label>
                </div>
                <button type="button" class="btn btn-sm btn-danger" onclick="removeOption(this)">×</button>
            `;
            container.appendChild(div);
        }

        // ===== Edit Form Logic =====
        function showEditForm(id) {
            hideCreateForm();
            const q = questionsData[id];
            if (!q) {
                showMessage('Question data not found.');
                return;
            }

            document.getElementById('edit-question-id').value = id;
            document.getElementById('edit-question-content').value = q.content;
            document.getElementById('edit-question-type').value = q.questionType;

            const container = document.getElementById('edit-options-container');
            container.innerHTML = '';
            const options = JSON.parse(q.optionsJson || '[]');
            options.forEach((opt, i) => {
                const div = document.createElement('div');
                div.className = 'd-flex align-items-center mb-2';
                div.innerHTML = `
                    <input type="text" class="form-control mr-2 edit-option-content" value="${escapeHtml(opt.Content)}" />
                    <div class="form-check mr-2">
                        <input type="checkbox" class="form-check-input edit-option-correct" id="edit-correct-${i}" ${opt.IsCorrect ? 'checked' : ''} />
                        <label class="form-check-label" for="edit-correct-${i}">Correct</label>
                    </div>
                    <button type="button" class="btn btn-sm btn-danger" onclick="removeOption(this)">×</button>
                `;
                container.appendChild(div);
            });

            document.getElementById('edit-form-container').style.display = 'block';
        }

        function hideEditForm() {
            document.getElementById('edit-form-container').style.display = 'none';
        }

        function addEditOption() {
            const container = document.getElementById('edit-options-container');
            const index = container.children.length;

            const div = document.createElement('div');
            div.className = 'd-flex align-items-center mb-2';
            div.innerHTML = `
                <input type="text" class="form-control mr-2 edit-option-content" placeholder="Option content" />
                <div class="form-check mr-2">
                    <input type="checkbox" class="form-check-input edit-option-correct" id="edit-correct-${index}" />
                    <label class="form-check-label" for="edit-correct-${index}">Correct</label>
                </div>
                <button type="button" class="btn btn-sm btn-danger" onclick="removeOption(this)">×</button>
            `;
            container.appendChild(div);
        }

        function removeOption(button) {
            button.parentElement.remove();
        }

        // ===== Save New Question =====
        async function saveNewQuestion() {
            const content = document.getElementById('new-question-content').value.trim();
            if (!content) {
                showMessage('Question content is required.');
                return;
            }

            const optionEls = document.querySelectorAll('#new-options-container .option-content');
            const correctEls = document.querySelectorAll('#new-options-container .option-correct');

            const options = [];
            for (let i = 0; i < optionEls.length; i++) {
                const optionContent = optionEls[i].value.trim();
                if (!optionContent) continue;
                options.push({
                    Content: optionContent,
                    IsCorrect: correctEls[i].checked
                });
            }

            if (options.length < 2) {
                showMessage('At least two options are required.');
                return;
            }

            if (newQuestionType === 'SingleChoice' && options.filter(o => o.IsCorrect).length !== 1) {
                showMessage('Single choice must have exactly one correct answer.');
                return;
            }

            if (newQuestionType === 'MultipleChoice' && options.filter(o => o.IsCorrect).length < 1) {
                showMessage('Multiple choice must have at least one correct answer.');
                return;
            }

            if (!quizId) {
                showMessage('No quiz ID provided.');
                return;
            }

            const newQuestion = {
                content,
                quizId: parseInt(quizId),
                questionType: newQuestionType,
                optionsJson: JSON.stringify(options)
            };

            try {
                const response = await fetch(`${API_URL}`, {
                    method: 'POST',
                    headers: getAuthHeaders(true),
                    body: JSON.stringify(newQuestion)
                });
                if (!response.ok) throw new Error('Failed to save question.');
                showMessage('Question created successfully.');
                hideCreateForm();
                loadQuestions();
            } catch (error) {
                console.error(error);
                showMessage('Error saving question.');
            }
        }

        // ===== Save Edited Question =====
        async function saveEditedQuestion() {
            const id = document.getElementById('edit-question-id').value;
            const content = document.getElementById('edit-question-content').value.trim();
            const questionType = document.getElementById('edit-question-type').value;

            if (!content) {
                showMessage('Question content is required.');
                return;
            }

            const optionEls = document.querySelectorAll('#edit-options-container .edit-option-content');
            const correctEls = document.querySelectorAll('#edit-options-container .edit-option-correct');

            const options = [];
            for (let i = 0; i < optionEls.length; i++) {
                const optionContent = optionEls[i].value.trim();
                if (!optionContent) continue;
                options.push({
                    Content: optionContent,
                    IsCorrect: correctEls[i].checked
                });
            }

            if (options.length < 2) {
                showMessage('At least two options are required.');
                return;
            }

            if (questionType === 'SingleChoice' && options.filter(o => o.IsCorrect).length !== 1) {
                showMessage('Single choice must have exactly one correct answer.');
                return;
            }

            if (questionType === 'MultipleChoice' && options.filter(o => o.IsCorrect).length < 1) {
                showMessage('Multiple choice must have at least one correct answer.');
                return;
            }

            try {
                const updatedQuestion = {
                    id: parseInt(id),
                    content,
                    quizId: parseInt(quizId),
                    questionType,
                    optionsJson: JSON.stringify(options)
                };

                const response = await fetch(`${API_URL}/${id}`, {
                    method: 'PUT',
                    headers: getAuthHeaders(true),
                    body: JSON.stringify(updatedQuestion)
                });
                if (!response.ok) throw new Error('Failed to update question.');
                showMessage('Question updated successfully.');
                hideEditForm();
                loadQuestions();
            } catch (error) {
                console.error(error);
                showMessage('Error updating question.');
            }
        }

        // ===== Delete Question =====
        async function deleteQuestion(id) {
            if (!confirm('Are you sure you want to delete this question?')) return;

            try {
                const response = await fetch(`${API_URL}/${id}`, {
                    method: 'DELETE',
                    headers: getAuthHeaders()
                });
                if (!response.ok) throw new Error('Failed to delete question.');
                showMessage('Question deleted successfully.');
                loadQuestions();
            } catch (error) {
                console.error(error);
                showMessage('Error deleting question.');
            }
        }

        // Variable to hold current create question type
        let newQuestionType = 'SingleChoice';
    </script>
</body>
</html>
