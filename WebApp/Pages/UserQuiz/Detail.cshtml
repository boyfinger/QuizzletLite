@page "{id:int}"
@model WebApp.Pages.UserQuiz.DetailModel
@{
    ViewData["Title"] = "Quiz Detail";
}

<h2 class="mb-4">Quiz Detail</h2>

<div id="quizDetail" class="mt-3"></div>

<script>
    const token = '@Model.AccessToken';
    const quizId = @Model.QuizId;

    async function loadQuizDetail() {
        try {
            const res = await fetch(`https://localhost:7245/api/user/quizzes/${quizId}`, {
                headers: { Authorization: "Bearer " + token }
            });

            if (!res.ok) {
                document.getElementById("quizDetail").innerHTML =
                    "<p class='text-danger'>Failed to load quiz.</p>";
                return;
            }

            const quiz = await res.json();
            let html = `
                <div class="card shadow-sm mb-3">
                    <div class="card-body d-flex justify-content-between align-items-center">
                        <h3 class="card-title mb-0">${quiz.name}</h3>
                        <div>
                            <button class="btn btn-primary me-2" onclick="goToEditQuiz()">Edit Quiz</button>
                            <button class="btn btn-danger" onclick="deleteQuiz()">Delete Entire Quiz</button>
                        </div>
                    </div>
                    <p class="text-muted px-3">Created on ${new Date(quiz.createdOn).toLocaleDateString()}</p>
                    <h5 class="mt-4 px-3">Questions:</h5>
            `;

            quiz.questions.forEach((question, index) => {
                html += `
                    <div class="card mt-3" data-question-id="${question.id}">
                        <div class="card-body">
                            <p><strong>Q${index + 1}:</strong> ${question.content}</p>
                            <ul class="list-group mb-2">
                `;

                try {
                    const options = JSON.parse(question.optionsJson);
                    options.forEach(opt => {
                        html += `
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                ${opt.Content}
                                ${opt.IsCorrect ? '<span class="badge bg-success rounded-pill">✅</span>' : ''}
                            </li>
                        `;
                    });
                } catch (e) {
                    html += `<li class="list-group-item text-danger">Invalid options JSON</li>`;
                    console.error('Failed to parse optionsJson:', question.optionsJson, e);
                }

                html += `
                            </ul>
                            <button class="btn btn-sm btn-outline-danger" onclick="deleteQuestion(${quiz.id}, ${question.id}, this)">Delete Question</button>
                        </div>
                    </div>
                `;
            });

            

            document.getElementById("quizDetail").innerHTML = html;

        } catch (err) {
            console.error("Error loading quiz:", err);
            document.getElementById("quizDetail").innerHTML =
                "<p class='text-danger'>An error occurred while loading the quiz.</p>";
        }
    }

    async function deleteQuiz() {
        if (!confirm("Are you sure you want to delete this entire quiz?")) return;

        try {
            const res = await fetch(`https://localhost:7245/api/user/quizzes/${quizId}`, {
                method: "DELETE",
                headers: { Authorization: "Bearer " + token }
            });

            if (!res.ok) throw new Error();

            alert("Quiz deleted successfully!");
            window.location.href = "/UserQuiz";
        } catch {
            alert("Failed to delete quiz.");
        }
    }

    async function deleteQuestion(quizId, questionId, button) {
        if (!confirm("Are you sure you want to delete this question?")) return;

        try {
            const res = await fetch(`https://localhost:7245/api/user/quizzes/${quizId}/questions/${questionId}`, {
                method: "DELETE",
                headers: { Authorization: "Bearer " + token }
            });

            if (!res.ok) throw new Error();

            alert("Question deleted successfully!");
            const card = button.closest(".card");
            card.remove();
        } catch {
            alert("Failed to delete question.");
        }
    }

    function goToEditQuiz() {
        window.location.href = `/UserQuiz/Edit/${quizId}`;
    }

    loadQuizDetail();
</script>
