@page
@model WebApp.Pages.QuizAttempt.ListModel
@{
    Layout = null;
    var accessToken = HttpContext.Session.GetString("accessToken");
}

<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
<link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
<link rel="stylesheet" href="~/WebApp.styles.css" asp-append-version="true" />

<table class="table table-striped" id="listTable">
    <thead>
        <tr>
            <th>Quiz Name</th>
            <th>Score</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
<script src="~/js/site.js" asp-append-version="true"></script>

<script>
    let accessToken = "@(accessToken ?? "")";

    window.onload = () => {
        renderQuizAttemptList();
    }

    async function fetchData(url){
        try {
            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + accessToken
                }
            });

            if (response.status === 401) {
                // Not authenticated — go to login
                window.location.href = "/Auth/Login";
                return;
            }

            if (response.status === 403) {
                // Authenticated but not authorized — go home
                window.location.href = "/";
                return;
            }

            if (!response.ok) {
                throw new Error('HTTP error! Status: ' + response.status);
            }

            return await response.json();
        } catch (error) {
            console.error('Error:', error.message);
        }
    }

    async function renderQuizAttemptList(){
        let url = "https://localhost:7245/api/QuizAttempt/user";
        let data = await fetchData(url);
        const tbody = document.querySelector('#listTable tbody');
        const rows = data.map(attempt => `
            <tr>
                <td>${attempt.name}</td>
                <td>${attempt.score}</td>
                <td>
                    <a href="/QuizAttempt/Details?id=${attempt.id}" class="btn btn-primary">View</a>
                </td>
            </tr>
        `).join('');
        tbody.innerHTML = rows;
    }
</script>